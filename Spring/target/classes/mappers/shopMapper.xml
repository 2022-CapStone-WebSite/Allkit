<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.mappers.shopMapper">
   

<!-- 카테고리별 상품 리스트: 1차 -->
<select id="list_1" resultType="com.spring.domain.GoodsViewVO">
<!-- select -->
<!--     g.gdsNum, g.gdsName, g.cateCode, c.cateCodeRef, c.cateName, -->
<!--     gdsPrice, gdsStock, gdsDes, gdsDate, g.gdsImg, g.gdsThumbImg -->
<!--         from tbl_goods g -->
<!--             inner join goods_category c -->
<!--                 on g.cateCode = c.cateCode            -->
<!--             where g.cateCode = #{cateCode} -->
<!--              or c.cateCodeRef = #{cateCodeRef} -->
                
                 
select       
    tg.gdsNum, tg.gdsName, tg.cateCode, tg.gdsPrice, tg.gdsStock, tg.gdsDes, tg.gdsImg, tg.gdsDate, tg.gdsThumbImg,
        tg.cateCodeRef, tg.cateName
    from (
        select g.gdsNum, g.gdsName, g.cateCode, g.gdsPrice,g.gdsStock,g.gdsDes,g.gdsImg,g.gdsDate,g.gdsThumbImg,
        c.cateCodeRef, c.cateName, row_number() over(order by gdsNum desc) as rNum 
        from tbl_goods g inner join goods_category c
            on g.cateCode = c.cateCode
            where g.cateCode = #{cateCode}   
            or c.cateCodeRef = #{cateCodeRef}
        ) tg
        where rNum between 1 and 10
<!--         where rNum between #{rowStart} and #{rowEnd} -->  
        order by gdsNum desc  
  
</select>
 

<!-- 카테고리별 상품 리스트 : 2차 분류 -->
<select id="list_2" resultType="com.spring.domain.GoodsViewVO">
<!-- select -->
<!--     g.gdsNum, g.gdsName, g.cateCode, c.cateCodeRef, c.cateName, -->
<!--     gdsPrice, gdsStock, gdsDes, gdsDate, g.gdsImg, g.gdsThumbImg -->
<!--         from tbl_goods g -->
<!--             inner join goods_category c -->
<!--                 on g.cateCode = c.cateCode            -->
<!--             where g.cateCode = #{cateCode} -->
  
 
   select     
    tg.gdsNum, tg.gdsName, tg.cateCode, tg.gdsPrice, tg.gdsStock, tg.gdsDes, tg.gdsImg, tg.gdsDate, tg.gdsThumbImg,
        tg.cateCodeRef, tg.cateName
    from (
        select g.gdsNum, g.gdsName, g.cateCode, g.gdsPrice,g.gdsStock,g.gdsDes,g.gdsImg,g.gdsDate,g.gdsThumbImg,
        c.cateCodeRef, c.cateName, row_number() over(order by gdsNum desc) as rNum 
        from tbl_goods g inner join goods_category c
            on g.cateCode = c.cateCode
            where g.cateCode = #{cateCode}   
        ) tg     
        where rNum between 1 and 10        
<!--         where rNum between #{rowStart} and #{rowEnd} -->
        order by gdsNum desc  
</select>


<!-- 검색창 -->
<select id="listSearch" resultType="com.spring.domain.GoodsViewVO" 
parameterType="com.spring.domain.SearchCriteria">
<!-- select      -->
<!--     gdsNum, gdsName, cateCode, gdsPrice,gdsStock,gdsDes,gdsImg,gdsDate,gdsThumbImg,gdsKcal -->
<!--     from ( -->
<!--         select gdsNum, gdsName, cateCode, gdsPrice,gdsStock,gdsDes,gdsImg,gdsDate,gdsThumbImg,gdsKcal, -->
<!--             row_number() over(order by gdsNum desc) as rNum  -->
<!--         from tbl_goods -->
<!--         	<include refid="search"></include> -->
<!--         ) tg -->
<!--     where rNum between #{rowStart} and #{rowEnd} -->
<!--         order by gdsNum desc -->
        
               
        
<!--         select        -->
<!--     tg.gdsNum, tg.gdsName, tg.cateCode, tg.gdsPrice, tg.gdsStock, tg.gdsDes, tg.gdsImg, tg.gdsDate, tg.gdsThumbImg, -->
<!--         tg.cateCodeRef, tg.cateName -->
<!--     from ( -->
<!--         select g.gdsNum, g.gdsName, g.cateCode, g.gdsPrice,g.gdsStock,g.gdsDes,g.gdsImg,g.gdsDate,g.gdsThumbImg, -->
<!--         c.cateCodeRef, c.cateName, row_number() over(order by gdsNum desc) as rNum  -->
<!--         from tbl_goods g inner join goods_category c -->
<!--             on g.cateCode = c.cateCode -->
<!--             where g.cateCode = #{cateCode}     -->
<!--             or c.cateCodeRef = #{cateCodeRef} -->
            
<!--             AND <include refid="search"></include>         -->
         
<!--         ) tg -->
<!--         where rNum between #{rowStart} and #{rowEnd} -->
<!--         order by gdsNum desc  -->
        
         
        
</select> 

<!-- <sql id="search"> -->
<!--  <if test="searchType != null"> -->
<!--   <if test="searchType == 'p'.toString()">gdsName like '%' || #{gdsName} || '%'</if> -->

<!--  </if> -->
<!-- </sql> -->

  
<!-- <select id="countSearch" resultType="int"> -->
<!-- 	select count(gdsNum) -->
<!-- 		from tbl_goods	 -->
<!-- 			<include refid="search"></include> -->
<!-- 	<![CDATA[ -->
<!-- 		and gdsNum > 0 -->
<!-- 	]]>  -->
	
<!-- </select> -->

<!-- 댓글평점평균 -->
<select id="getRatingAverage" resultType = "double">
	select avg(ratingAvg)
	  		from tbl_reply
	  		where gdsNum = #{gdsNum}

</select>
   
<!-- 댓글평점 반영 -->
<update id="updateRating">
	update tbl_goods
	set ratingAvge = #{ratingAvge}
	where gdsNum = #{gdsNum} 
</update> 




<!-- 상품 소감(댓글) 작성 -->
<insert id="registReply">
	insert into tbl_reply (gdsNum, userId, repNum, repCon, ratingAvg)
		values (#{gdsNum}, #{userId}, tbl_reply_seq.nextval, #{repCon}, #{ratingAvg})
</insert>
    
      
<!-- 평점 순 상품 정보 -->
<select id="likeSelect" resultType="com.spring.domain.SelectVO">
  
		select * from
		(select rownum as rn, gdsNum, gdsName, ratingAvge,gdsImg,gdsPrice, (select cateName from goods_category where tbl_goods.cateCode = goods_category.cateCode) as cateName
		from tbl_goods
		order by ratingAvge desc nulls last)
		<![CDATA[
		where rn < 4  
		]]>

</select>   
  
<!-- 낮은가격순 -->
<select id="lowPrice" resultType="com.spring.domain.SelectVO">   
  
		select * from
		(select rownum as rn, gdsNum, gdsName, ratingAvge,gdsImg,gdsPrice, (select cateName from goods_category where tbl_goods.cateCode = goods_category.cateCode) as cateName
		from tbl_goods
		order by gdsPrice asc nulls last)
		<![CDATA[
 		where rn < 4   
 		]]> 
  
</select>  

<!-- 높은가격순 -->
<select id="highPrice" resultType="com.spring.domain.SelectVO">   
  
		select * from
		(select rownum as rn, gdsNum, gdsName, ratingAvge,gdsImg,gdsPrice, (select cateName from goods_category where tbl_goods.cateCode = goods_category.cateCode) as cateName
		from tbl_goods
		order by gdsPrice desc nulls last)
		<![CDATA[
 		where rn < 4   
 		]]> 
  
</select>
  
<!-- 상품 댓글 삭제 -->
<delete id="deleteReply">
	delete tbl_reply
		where repNum = #{repNum}  
			and userId = #{userId}
				
</delete>

  
<!-- 상품 소감(댓글) 리스트 -->
<select id="replyList" resultType="com.spring.domain.ReplyListVO">  
	select  
    	r.gdsNum, r.userId, r.repNum, r.repCon, r.repDate, r.ratingAvg, m.userName 
	from tbl_reply r
	    inner join tbl_member m
	        on r.userId = m.userId
	    where gdsNum = #{gdsNum} 
</select>



<!-- 아이디 체크 -->
<select id="replyUserIdCheck" resultType="String">
	select userId
		from tbl_reply
			where repNum = #{repNum}
</select>

<!-- 상품 소감(댓글) 수정 -->
<update id="modifyReply">
   update tbl_reply
       set
           repCon = #{repCon}
       where repNum = #{repNum}
           and userId = #{userId}
</update>

<insert id="addCart">
	insert into tbl_cart (cartNum, userId, gdsNum, cartStock)
		values (tbl_cart_seq.nextval, #{userId}, #{gdsNum}, ${cartStock})  
</insert>

<!-- 카트 리스트 -->
<select id="cartList" resultType="com.spring.domain.CartListVO">
select 
    row_number() over(order by c.cartNum desc) as num,
    c.cartNum, c.userId, c.gdsNum, c.cartStock, c.addDate,
    g.gdsName, g.gdsPrice, g.gdsThumbImg, g.gdsKcal
from tbl_cart c
    inner join tbl_goods g
     	on c.gdsNum = g.gdsNum 
    where c.userId = #{userId}
</select>

<!-- 카트 삭제 -->
<delete id="deleteCart">
	delete tbl_cart
		where cartNum = #{cartNum}
			and userId = #{userId}
</delete>


<!-- 주문 정보 -->
<insert id="orderInfo">
   insert into tbl_order(orderId, userId, orderRec, userAddr1, userAddr2, userAddr3, orderPhon, amount)
       values(#{orderId}, #{userId}, #{orderRec}, #{userAddr1}, #{userAddr2}, #{userAddr3}, #{orderPhon}, #{amount})
</insert>
   
<!-- 주문 상세 정보 --> 
<insert id="orderInfo_Details">
   insert into tbl_order_details(orderDetailsNum, orderId, gdsNum, cartStock)
       select tbl_order_details_seq.nextval, #{orderId}, gdsNum, cartStock
           from tbl_cart   
</insert>   
  
<!-- 카트 비우기 -->
<delete id="cartAllDelete">
 delete tbl_cart
     where userId = #{userId}
</delete>  

<!-- 특정 유저의 주문 목록 -->
<select id="orderList" resultType="com.spring.domain.OrderVO">
 select
     orderId, userId, orderRec, userAddr1, userAddr2, userAddr3, orderPhon,
     amount, orderDate, delivery
 from tbl_order 
     where userId = #{userId}
</select>

<!-- 특정 유저의 주문 목록 페이징 -->
<select id="listPageOrder" resultType="com.spring.domain.OrderVO"
parameterType="com.spring.domain.Criteria">
 select orderId, userId, orderRec, userAddr1,userAddr2,userAddr3,orderPhon,amount,orderDate,delivery
    from (
        select orderId, userId, orderRec, userAddr1,userAddr2,userAddr3,orderPhon,amount,orderDate,delivery,
            row_number() over(order by orderId desc) as rNum
        from tbl_order) tb
    where rNum between #{rowStart} and #{rowEnd}
        order by orderId desc

</select>

<!-- 주문목록 갯수 -->
<select id="listCountOrder" resultType="int">
<![CDATA[
	select count(orderId)
    from tbl_order
        where 1=1
            and to_number(replace(nvl(orderId,'0'),'_','0')) > 0
]]>
</select>
 
<!-- 특정 주문 목록 -->
<select id="orderView" resultType="com.spring.domain.OrderListVO">
select
    o.orderId, o.userId, o.orderRec,
    o.userAddr1, o.userAddr2, o.userAddr3,
    o.orderPhon, o.amount, o.orderDate, o.delivery,
    d.orderDetailsNum, d.gdsNum, d.cartStock,
    g.gdsName, g.gdsthumbimg, g.gdsPrice
from tbl_order o
    inner join tbl_order_details d
        on o.orderId = d.orderId
    inner join tbl_goods g
        on d.gdsNum = g.gdsNum
    where o.userId = #{userId}
        and o.orderId = #{orderId}


</select>




	<!--페이징  -->
	

        

</mapper>